/*
 * generated by Xtext 2.14.0
 */
grammar InternalFeedback;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package ac.soton.xmark.feedback.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package ac.soton.xmark.feedback.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import ac.soton.xmark.feedback.services.FeedbackGrammarAccess;

}
@parser::members {
	private FeedbackGrammarAccess grammarAccess;

	public void setGrammarAccess(FeedbackGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExerciseFeedback
entryRuleExerciseFeedback
:
{ before(grammarAccess.getExerciseFeedbackRule()); }
	 ruleExerciseFeedback
{ after(grammarAccess.getExerciseFeedbackRule()); } 
	 EOF 
;

// Rule ExerciseFeedback
ruleExerciseFeedback 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExerciseFeedbackAccess().getGroup()); }
		(rule__ExerciseFeedback__Group__0)
		{ after(grammarAccess.getExerciseFeedbackAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeedback
entryRuleFeedback
:
{ before(grammarAccess.getFeedbackRule()); }
	 ruleFeedback
{ after(grammarAccess.getFeedbackRule()); } 
	 EOF 
;

// Rule Feedback
ruleFeedback 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeedbackAccess().getGroup()); }
		(rule__Feedback__Group__0)
		{ after(grammarAccess.getFeedbackAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group__0__Impl
	rule__ExerciseFeedback__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getExerciseFeedbackAction_0()); }
	()
	{ after(grammarAccess.getExerciseFeedbackAccess().getExerciseFeedbackAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group__1__Impl
	rule__ExerciseFeedback__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getFeedbackKeyword_1()); }
	'Feedback'
	{ after(grammarAccess.getExerciseFeedbackAccess().getFeedbackKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group__2__Impl
	rule__ExerciseFeedback__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getNameAssignment_2()); }
	(rule__ExerciseFeedback__NameAssignment_2)
	{ after(grammarAccess.getExerciseFeedbackAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group__3__Impl
	rule__ExerciseFeedback__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getGroup_3()); }
	(rule__ExerciseFeedback__Group_3__0)?
	{ after(grammarAccess.getExerciseFeedbackAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getExerciseFeedbackAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExerciseFeedback__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group_3__0__Impl
	rule__ExerciseFeedback__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getFeedbacksAssignment_3_0()); }
	(rule__ExerciseFeedback__FeedbacksAssignment_3_0)
	{ after(grammarAccess.getExerciseFeedbackAccess().getFeedbacksAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExerciseFeedback__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExerciseFeedbackAccess().getFeedbacksAssignment_3_1()); }
	(rule__ExerciseFeedback__FeedbacksAssignment_3_1)*
	{ after(grammarAccess.getExerciseFeedbackAccess().getFeedbacksAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feedback__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__0__Impl
	rule__Feedback__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getNameAssignment_0()); }
	(rule__Feedback__NameAssignment_0)
	{ after(grammarAccess.getFeedbackAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__1__Impl
	rule__Feedback__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getFeedbackAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__2__Impl
	rule__Feedback__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getRecipientsKeyword_2()); }
	'recipients'
	{ after(grammarAccess.getFeedbackAccess().getRecipientsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__3__Impl
	rule__Feedback__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getRecipientsAssignment_3()); }
	(rule__Feedback__RecipientsAssignment_3)
	{ after(grammarAccess.getFeedbackAccess().getRecipientsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__4__Impl
	rule__Feedback__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getTitleKeyword_4()); }
	'title'
	{ after(grammarAccess.getFeedbackAccess().getTitleKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__5__Impl
	rule__Feedback__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getTitleAssignment_5()); }
	(rule__Feedback__TitleAssignment_5)
	{ after(grammarAccess.getFeedbackAccess().getTitleAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__6__Impl
	rule__Feedback__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getFeedbackKeyword_6()); }
	'feedback'
	{ after(grammarAccess.getFeedbackAccess().getFeedbackKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__7__Impl
	rule__Feedback__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getFeedbackAssignment_7()); }
	(rule__Feedback__FeedbackAssignment_7)
	{ after(grammarAccess.getFeedbackAccess().getFeedbackAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feedback__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeedbackAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getFeedbackAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExerciseFeedback__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExerciseFeedbackAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getExerciseFeedbackAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__FeedbacksAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExerciseFeedbackAccess().getFeedbacksFeedbackParserRuleCall_3_0_0()); }
		ruleFeedback
		{ after(grammarAccess.getExerciseFeedbackAccess().getFeedbacksFeedbackParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExerciseFeedback__FeedbacksAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExerciseFeedbackAccess().getFeedbacksFeedbackParserRuleCall_3_1_0()); }
		ruleFeedback
		{ after(grammarAccess.getExerciseFeedbackAccess().getFeedbacksFeedbackParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeedbackAccess().getNameEStringParserRuleCall_0_0()); }
		ruleEString
		{ after(grammarAccess.getFeedbackAccess().getNameEStringParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__RecipientsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeedbackAccess().getRecipientsEStringParserRuleCall_3_0()); }
		ruleEString
		{ after(grammarAccess.getFeedbackAccess().getRecipientsEStringParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__TitleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeedbackAccess().getTitleEStringParserRuleCall_5_0()); }
		ruleEString
		{ after(grammarAccess.getFeedbackAccess().getTitleEStringParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedback__FeedbackAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeedbackAccess().getFeedbackEStringParserRuleCall_7_0()); }
		ruleEString
		{ after(grammarAccess.getFeedbackAccess().getFeedbackEStringParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
