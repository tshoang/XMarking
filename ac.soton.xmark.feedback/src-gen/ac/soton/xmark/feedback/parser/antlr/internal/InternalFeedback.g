/*
 * generated by Xtext 2.14.0
 */
grammar InternalFeedback;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package ac.soton.xmark.feedback.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ac.soton.xmark.feedback.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ac.soton.xmark.feedback.services.FeedbackGrammarAccess;

}

@parser::members {

 	private FeedbackGrammarAccess grammarAccess;

    public InternalFeedbackParser(TokenStream input, FeedbackGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "ExerciseFeedback";
   	}

   	@Override
   	protected FeedbackGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExerciseFeedback
entryRuleExerciseFeedback returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExerciseFeedbackRule()); }
	iv_ruleExerciseFeedback=ruleExerciseFeedback
	{ $current=$iv_ruleExerciseFeedback.current; }
	EOF;

// Rule ExerciseFeedback
ruleExerciseFeedback returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getExerciseFeedbackAccess().getExerciseFeedbackAction_0(),
					$current);
			}
		)
		otherlv_1='Feedback'
		{
			newLeafNode(otherlv_1, grammarAccess.getExerciseFeedbackAccess().getFeedbackKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExerciseFeedbackAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExerciseFeedbackRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"ac.soton.xmark.feedback.Feedback.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExerciseFeedbackAccess().getFeedbacksFeedbackParserRuleCall_3_0_0());
					}
					lv_feedbacks_3_0=ruleFeedback
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExerciseFeedbackRule());
						}
						add(
							$current,
							"feedbacks",
							lv_feedbacks_3_0,
							"ac.soton.xmark.feedback.Feedback.Feedback");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExerciseFeedbackAccess().getFeedbacksFeedbackParserRuleCall_3_1_0());
					}
					lv_feedbacks_4_0=ruleFeedback
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExerciseFeedbackRule());
						}
						add(
							$current,
							"feedbacks",
							lv_feedbacks_4_0,
							"ac.soton.xmark.feedback.Feedback.Feedback");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getExerciseFeedbackAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleFeedback
entryRuleFeedback returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeedbackRule()); }
	iv_ruleFeedback=ruleFeedback
	{ $current=$iv_ruleFeedback.current; }
	EOF;

// Rule Feedback
ruleFeedback returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFeedbackAccess().getNameEStringParserRuleCall_0_0());
				}
				lv_name_0_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeedbackRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"ac.soton.xmark.feedback.Feedback.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getFeedbackAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='recipients'
		{
			newLeafNode(otherlv_2, grammarAccess.getFeedbackAccess().getRecipientsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeedbackAccess().getRecipientsEStringParserRuleCall_3_0());
				}
				lv_recipients_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeedbackRule());
					}
					set(
						$current,
						"recipients",
						lv_recipients_3_0,
						"ac.soton.xmark.feedback.Feedback.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='title'
		{
			newLeafNode(otherlv_4, grammarAccess.getFeedbackAccess().getTitleKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeedbackAccess().getTitleEStringParserRuleCall_5_0());
				}
				lv_title_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeedbackRule());
					}
					set(
						$current,
						"title",
						lv_title_5_0,
						"ac.soton.xmark.feedback.Feedback.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='feedback'
		{
			newLeafNode(otherlv_6, grammarAccess.getFeedbackAccess().getFeedbackKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeedbackAccess().getFeedbackEStringParserRuleCall_7_0());
				}
				lv_feedback_7_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeedbackRule());
					}
					set(
						$current,
						"feedback",
						lv_feedback_7_0,
						"ac.soton.xmark.feedback.Feedback.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getFeedbackAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
