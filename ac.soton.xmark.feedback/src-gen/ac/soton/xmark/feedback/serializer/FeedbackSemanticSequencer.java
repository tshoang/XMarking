/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.feedback.serializer;

import ac.soton.xmark.feedback.ExerciseFeedback;
import ac.soton.xmark.feedback.Feedback;
import ac.soton.xmark.feedback.FeedbackPackage;
import ac.soton.xmark.feedback.services.FeedbackGrammarAccess;
import ac.soton.xmark.markingcore.MarkingcorePackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class FeedbackSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FeedbackGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FeedbackPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FeedbackPackage.EXERCISE_FEEDBACK:
				sequence_ExerciseFeedback(context, (ExerciseFeedback) semanticObject); 
				return; 
			case FeedbackPackage.FEEDBACK:
				sequence_Feedback(context, (Feedback) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ExerciseFeedback returns ExerciseFeedback
	 *
	 * Constraint:
	 *     (name=EString (feedbacks+=Feedback feedbacks+=Feedback*)?)
	 */
	protected void sequence_ExerciseFeedback(ISerializationContext context, ExerciseFeedback semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feedback returns Feedback
	 *
	 * Constraint:
	 *     (name=EString recipients=EString title=EString feedback=EString)
	 */
	protected void sequence_Feedback(ISerializationContext context, Feedback semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MarkingcorePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkingcorePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, FeedbackPackage.Literals.FEEDBACK__RECIPIENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeedbackPackage.Literals.FEEDBACK__RECIPIENTS));
			if (transientValues.isValueTransient(semanticObject, FeedbackPackage.Literals.FEEDBACK__TITLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeedbackPackage.Literals.FEEDBACK__TITLE));
			if (transientValues.isValueTransient(semanticObject, FeedbackPackage.Literals.FEEDBACK__FEEDBACK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FeedbackPackage.Literals.FEEDBACK__FEEDBACK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeedbackAccess().getNameEStringParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFeedbackAccess().getRecipientsEStringParserRuleCall_3_0(), semanticObject.getRecipients());
		feeder.accept(grammarAccess.getFeedbackAccess().getTitleEStringParserRuleCall_5_0(), semanticObject.getTitle());
		feeder.accept(grammarAccess.getFeedbackAccess().getFeedbackEStringParserRuleCall_7_0(), semanticObject.getFeedback());
		feeder.finish();
	}
	
	
}
