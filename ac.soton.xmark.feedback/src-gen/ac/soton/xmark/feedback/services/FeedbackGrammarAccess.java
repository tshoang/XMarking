/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.feedback.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FeedbackGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExerciseFeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.feedback.Feedback.ExerciseFeedback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExerciseFeedbackAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFeedbackKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFeedbacksAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFeedbacksFeedbackParserRuleCall_3_0_0 = (RuleCall)cFeedbacksAssignment_3_0.eContents().get(0);
		private final Assignment cFeedbacksAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeedbacksFeedbackParserRuleCall_3_1_0 = (RuleCall)cFeedbacksAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExerciseFeedback:
		//	{ExerciseFeedback}
		//	'Feedback' name=EString (feedbacks+=Feedback feedbacks+=Feedback*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{ExerciseFeedback} 'Feedback' name=EString (feedbacks+=Feedback feedbacks+=Feedback*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{ExerciseFeedback}
		public Action getExerciseFeedbackAction_0() { return cExerciseFeedbackAction_0; }
		
		//'Feedback'
		public Keyword getFeedbackKeyword_1() { return cFeedbackKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//(feedbacks+=Feedback feedbacks+=Feedback*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//feedbacks+=Feedback
		public Assignment getFeedbacksAssignment_3_0() { return cFeedbacksAssignment_3_0; }
		
		//Feedback
		public RuleCall getFeedbacksFeedbackParserRuleCall_3_0_0() { return cFeedbacksFeedbackParserRuleCall_3_0_0; }
		
		//feedbacks+=Feedback*
		public Assignment getFeedbacksAssignment_3_1() { return cFeedbacksAssignment_3_1; }
		
		//Feedback
		public RuleCall getFeedbacksFeedbackParserRuleCall_3_1_0() { return cFeedbacksFeedbackParserRuleCall_3_1_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.feedback.Feedback.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class FeedbackElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.feedback.Feedback.Feedback");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRecipientsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRecipientsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRecipientsEStringParserRuleCall_3_0 = (RuleCall)cRecipientsAssignment_3.eContents().get(0);
		private final Keyword cTitleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTitleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTitleEStringParserRuleCall_5_0 = (RuleCall)cTitleAssignment_5.eContents().get(0);
		private final Keyword cFeedbackKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cFeedbackAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cFeedbackEStringParserRuleCall_7_0 = (RuleCall)cFeedbackAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Feedback:
		//	name=EString
		//	'{'
		//	'recipients' recipients=EString
		//	'title' title=EString
		//	'feedback' feedback=EString
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString '{' 'recipients' recipients=EString 'title' title=EString 'feedback' feedback=EString '}'
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'recipients'
		public Keyword getRecipientsKeyword_2() { return cRecipientsKeyword_2; }
		
		//recipients=EString
		public Assignment getRecipientsAssignment_3() { return cRecipientsAssignment_3; }
		
		//EString
		public RuleCall getRecipientsEStringParserRuleCall_3_0() { return cRecipientsEStringParserRuleCall_3_0; }
		
		//'title'
		public Keyword getTitleKeyword_4() { return cTitleKeyword_4; }
		
		//title=EString
		public Assignment getTitleAssignment_5() { return cTitleAssignment_5; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_5_0() { return cTitleEStringParserRuleCall_5_0; }
		
		//'feedback'
		public Keyword getFeedbackKeyword_6() { return cFeedbackKeyword_6; }
		
		//feedback=EString
		public Assignment getFeedbackAssignment_7() { return cFeedbackAssignment_7; }
		
		//EString
		public RuleCall getFeedbackEStringParserRuleCall_7_0() { return cFeedbackEStringParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	
	
	private final ExerciseFeedbackElements pExerciseFeedback;
	private final EStringElements pEString;
	private final FeedbackElements pFeedback;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FeedbackGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExerciseFeedback = new ExerciseFeedbackElements();
		this.pEString = new EStringElements();
		this.pFeedback = new FeedbackElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xmark.feedback.Feedback".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ExerciseFeedback:
	//	{ExerciseFeedback}
	//	'Feedback' name=EString (feedbacks+=Feedback feedbacks+=Feedback*)?
	//	'end';
	public ExerciseFeedbackElements getExerciseFeedbackAccess() {
		return pExerciseFeedback;
	}
	
	public ParserRule getExerciseFeedbackRule() {
		return getExerciseFeedbackAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Feedback:
	//	name=EString
	//	'{'
	//	'recipients' recipients=EString
	//	'title' title=EString
	//	'feedback' feedback=EString
	//	'}';
	public FeedbackElements getFeedbackAccess() {
		return pFeedback;
	}
	
	public ParserRule getFeedbackRule() {
		return getFeedbackAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
