/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.feedback.formatting2

import ac.soton.xmark.feedback.ExerciseFeedback
import ac.soton.xmark.feedback.Feedback
import ac.soton.xmark.feedback.services.FeedbackGrammarAccess
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class FeedbackFormatter extends AbstractFormatter2 {
	
	@Inject extension FeedbackGrammarAccess

	def dispatch void format(ExerciseFeedback exerciseFeedback, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		
		val feedbacks = exerciseFeedback.feedbacks
		for (feedback : feedbacks) {
			feedback.format.prepend[newLines=2]
			feedback.interior[indent]
		}
		exerciseFeedback.allRegionsFor.ruleCallTo(ML_COMMENTRule).append[newLine]
		exerciseFeedback.regionFor.keyword("end").prepend[newLine];
		
	}
	
	def dispatch void format(Feedback feedback, extension IFormattableDocument document) {
		// add new lines before and after some machine keywords
		feedback.regionFor.keyword("recipients").prepend[newLine];
		feedback.regionFor.keyword("title").prepend[newLine];
		feedback.regionFor.keyword("feedback").prepend[newLine];
		feedback.regionFor.keyword("}").prepend[newLine];
		// add new line after multi line comment
		feedback.allRegionsFor.ruleCallTo(ML_COMMENTRule).append[newLine]
		

	}
}
