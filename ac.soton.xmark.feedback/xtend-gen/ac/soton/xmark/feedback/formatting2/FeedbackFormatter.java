/**
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.feedback.formatting2;

import ac.soton.xmark.feedback.ExerciseFeedback;
import ac.soton.xmark.feedback.Feedback;
import ac.soton.xmark.feedback.services.FeedbackGrammarAccess;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class FeedbackFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private FeedbackGrammarAccess _feedbackGrammarAccess;
  
  protected void _format(final ExerciseFeedback exerciseFeedback, @Extension final IFormattableDocument document) {
    EList<Feedback> _feedbacks = exerciseFeedback.getFeedbacks();
    for (final Feedback feedback : _feedbacks) {
      document.<Feedback>format(feedback);
    }
  }
  
  public void format(final Object exerciseFeedback, final IFormattableDocument document) {
    if (exerciseFeedback instanceof XtextResource) {
      _format((XtextResource)exerciseFeedback, document);
      return;
    } else if (exerciseFeedback instanceof ExerciseFeedback) {
      _format((ExerciseFeedback)exerciseFeedback, document);
      return;
    } else if (exerciseFeedback instanceof EObject) {
      _format((EObject)exerciseFeedback, document);
      return;
    } else if (exerciseFeedback == null) {
      _format((Void)null, document);
      return;
    } else if (exerciseFeedback != null) {
      _format(exerciseFeedback, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exerciseFeedback, document).toString());
    }
  }
}
