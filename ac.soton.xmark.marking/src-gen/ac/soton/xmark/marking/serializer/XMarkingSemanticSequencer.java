/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.marking.serializer;

import ac.soton.xmark.marking.Comment;
import ac.soton.xmark.marking.Exercise;
import ac.soton.xmark.marking.Group;
import ac.soton.xmark.marking.Mark;
import ac.soton.xmark.marking.MarkingPackage;
import ac.soton.xmark.marking.Question;
import ac.soton.xmark.marking.QuestionGrade;
import ac.soton.xmark.marking.Section;
import ac.soton.xmark.marking.SectionGrade;
import ac.soton.xmark.marking.Student;
import ac.soton.xmark.marking.services.XMarkingGrammarAccess;
import ac.soton.xmark.markingcore.MarkingcorePackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class XMarkingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private XMarkingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MarkingPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MarkingPackage.COMMENT:
				sequence_XComment(context, (Comment) semanticObject); 
				return; 
			case MarkingPackage.EXERCISE:
				sequence_Exercise(context, (Exercise) semanticObject); 
				return; 
			case MarkingPackage.GROUP:
				sequence_XGroup(context, (Group) semanticObject); 
				return; 
			case MarkingPackage.MARK:
				sequence_XMark(context, (Mark) semanticObject); 
				return; 
			case MarkingPackage.QUESTION:
				sequence_XQuestion(context, (Question) semanticObject); 
				return; 
			case MarkingPackage.QUESTION_GRADE:
				sequence_QuestionGrade(context, (QuestionGrade) semanticObject); 
				return; 
			case MarkingPackage.SECTION:
				sequence_XSection(context, (Section) semanticObject); 
				return; 
			case MarkingPackage.SECTION_GRADE:
				sequence_SectionGrade(context, (SectionGrade) semanticObject); 
				return; 
			case MarkingPackage.STUDENT:
				sequence_XStudent(context, (Student) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Exercise returns Exercise
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         module=EString 
	 *         (parts+=XPart parts+=XPart*)? 
	 *         students+=XStudent 
	 *         students+=XStudent* 
	 *         (groups+=XGroup groups+=XGroup*)? 
	 *         (marks+=XMark marks+=XMark*)?
	 *     )
	 */
	protected void sequence_Exercise(ISerializationContext context, Exercise semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPartGrade returns QuestionGrade
	 *     QuestionGrade returns QuestionGrade
	 *
	 * Constraint:
	 *     (part=[Question|EString] mark=EInt (comments+=[Comment|EString] comments+=[Comment|EString]*)?)
	 */
	protected void sequence_QuestionGrade(ISerializationContext context, QuestionGrade semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPartGrade returns SectionGrade
	 *     SectionGrade returns SectionGrade
	 *
	 * Constraint:
	 *     (part=[Section|EString] (comments+=[Comment|EString] comments+=[Comment|EString]*)? subgrades+=XPartGrade subgrades+=XPartGrade*)
	 */
	protected void sequence_SectionGrade(ISerializationContext context, SectionGrade semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XComment returns Comment
	 *
	 * Constraint:
	 *     (name=ID comment=STRING)
	 */
	protected void sequence_XComment(ISerializationContext context, Comment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MarkingcorePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkingcorePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MarkingPackage.Literals.COMMENT__COMMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkingPackage.Literals.COMMENT__COMMENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXCommentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getXCommentAccess().getCommentSTRINGTerminalRuleCall_2_0(), semanticObject.getComment());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     XGroup returns Group
	 *
	 * Constraint:
	 *     (name=ID students+=[Student|ID] students+=[Student|ID]*)
	 */
	protected void sequence_XGroup(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XMark returns Mark
	 *
	 * Constraint:
	 *     (recipient=[Recipient|ID] grade+=XPartGrade grade+=XPartGrade*)
	 */
	protected void sequence_XMark(ISerializationContext context, Mark semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPart returns Question
	 *     XQuestion returns Question
	 *
	 * Constraint:
	 *     (name=EString grade=INT (comments+=XComment comments+=XComment*)?)
	 */
	protected void sequence_XQuestion(ISerializationContext context, Question semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XPart returns Section
	 *     XSection returns Section
	 *
	 * Constraint:
	 *     (name=EString (comments+=XComment comments+=XComment*)? subsections+=XPart subsections+=XPart*)
	 */
	protected void sequence_XSection(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     XStudent returns Student
	 *
	 * Constraint:
	 *     (name=ID firstname=EString lastname=EString)
	 */
	protected void sequence_XStudent(ISerializationContext context, Student semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MarkingcorePackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkingcorePackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MarkingPackage.Literals.STUDENT__FIRSTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkingPackage.Literals.STUDENT__FIRSTNAME));
			if (transientValues.isValueTransient(semanticObject, MarkingPackage.Literals.STUDENT__LASTNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MarkingPackage.Literals.STUDENT__LASTNAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXStudentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getXStudentAccess().getFirstnameEStringParserRuleCall_2_0(), semanticObject.getFirstname());
		feeder.accept(grammarAccess.getXStudentAccess().getLastnameEStringParserRuleCall_3_0(), semanticObject.getLastname());
		feeder.finish();
	}
	
	
}
