/*
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.marking.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class XMarkingGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExerciseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.Exercise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExerciseAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cExerciseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cProblemKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cClassKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cTutorialKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cAssignmentKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cCourseworkKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModuleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModuleEStringParserRuleCall_4_0 = (RuleCall)cModuleAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPartsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPartsXPartParserRuleCall_6_0_0 = (RuleCall)cPartsAssignment_6_0.eContents().get(0);
		private final Assignment cPartsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPartsXPartParserRuleCall_6_1_0 = (RuleCall)cPartsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cStudentsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cStudentsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cStudentsXStudentParserRuleCall_7_1_0 = (RuleCall)cStudentsAssignment_7_1.eContents().get(0);
		private final Assignment cStudentsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cStudentsXStudentParserRuleCall_7_2_0 = (RuleCall)cStudentsAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cGroupsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cGroupsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cGroupsXGroupParserRuleCall_8_1_0 = (RuleCall)cGroupsAssignment_8_1.eContents().get(0);
		private final Assignment cGroupsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cGroupsXGroupParserRuleCall_8_2_0 = (RuleCall)cGroupsAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cMarksKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cMarksAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cMarksXMarkParserRuleCall_9_1_0 = (RuleCall)cMarksAssignment_9_1.eContents().get(0);
		private final Assignment cMarksAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cMarksXMarkParserRuleCall_9_2_0 = (RuleCall)cMarksAssignment_9_2.eContents().get(0);
		private final Keyword cEndKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Exercise:
		//	{Exercise} ('exercise' | 'problem' 'class' | 'tutorial' | 'assignment' | 'coursework') name=EString '(' module=EString
		//	')' (parts+=XPart parts+=XPart*)? ('students' students+=XStudent students+=XStudent*) ('groups' groups+=XGroup
		//	groups+=XGroup*)? ('marks' marks+=XMark marks+=XMark*)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Exercise} ('exercise' | 'problem' 'class' | 'tutorial' | 'assignment' | 'coursework') name=EString '(' module=EString
		//')' (parts+=XPart parts+=XPart*)? ('students' students+=XStudent students+=XStudent*) ('groups' groups+=XGroup
		//groups+=XGroup*)? ('marks' marks+=XMark marks+=XMark*)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{Exercise}
		public Action getExerciseAction_0() { return cExerciseAction_0; }
		
		//'exercise' | 'problem' 'class' | 'tutorial' | 'assignment' | 'coursework'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'exercise'
		public Keyword getExerciseKeyword_1_0() { return cExerciseKeyword_1_0; }
		
		//'problem' 'class'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'problem'
		public Keyword getProblemKeyword_1_1_0() { return cProblemKeyword_1_1_0; }
		
		//'class'
		public Keyword getClassKeyword_1_1_1() { return cClassKeyword_1_1_1; }
		
		//'tutorial'
		public Keyword getTutorialKeyword_1_2() { return cTutorialKeyword_1_2; }
		
		//'assignment'
		public Keyword getAssignmentKeyword_1_3() { return cAssignmentKeyword_1_3; }
		
		//'coursework'
		public Keyword getCourseworkKeyword_1_4() { return cCourseworkKeyword_1_4; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//module=EString
		public Assignment getModuleAssignment_4() { return cModuleAssignment_4; }
		
		//EString
		public RuleCall getModuleEStringParserRuleCall_4_0() { return cModuleEStringParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//(parts+=XPart parts+=XPart*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//parts+=XPart
		public Assignment getPartsAssignment_6_0() { return cPartsAssignment_6_0; }
		
		//XPart
		public RuleCall getPartsXPartParserRuleCall_6_0_0() { return cPartsXPartParserRuleCall_6_0_0; }
		
		//parts+=XPart*
		public Assignment getPartsAssignment_6_1() { return cPartsAssignment_6_1; }
		
		//XPart
		public RuleCall getPartsXPartParserRuleCall_6_1_0() { return cPartsXPartParserRuleCall_6_1_0; }
		
		//'students' students+=XStudent students+=XStudent*
		public Group getGroup_7() { return cGroup_7; }
		
		//'students'
		public Keyword getStudentsKeyword_7_0() { return cStudentsKeyword_7_0; }
		
		//students+=XStudent
		public Assignment getStudentsAssignment_7_1() { return cStudentsAssignment_7_1; }
		
		//XStudent
		public RuleCall getStudentsXStudentParserRuleCall_7_1_0() { return cStudentsXStudentParserRuleCall_7_1_0; }
		
		//students+=XStudent*
		public Assignment getStudentsAssignment_7_2() { return cStudentsAssignment_7_2; }
		
		//XStudent
		public RuleCall getStudentsXStudentParserRuleCall_7_2_0() { return cStudentsXStudentParserRuleCall_7_2_0; }
		
		//('groups' groups+=XGroup groups+=XGroup*)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'groups'
		public Keyword getGroupsKeyword_8_0() { return cGroupsKeyword_8_0; }
		
		//groups+=XGroup
		public Assignment getGroupsAssignment_8_1() { return cGroupsAssignment_8_1; }
		
		//XGroup
		public RuleCall getGroupsXGroupParserRuleCall_8_1_0() { return cGroupsXGroupParserRuleCall_8_1_0; }
		
		//groups+=XGroup*
		public Assignment getGroupsAssignment_8_2() { return cGroupsAssignment_8_2; }
		
		//XGroup
		public RuleCall getGroupsXGroupParserRuleCall_8_2_0() { return cGroupsXGroupParserRuleCall_8_2_0; }
		
		//('marks' marks+=XMark marks+=XMark*)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'marks'
		public Keyword getMarksKeyword_9_0() { return cMarksKeyword_9_0; }
		
		//marks+=XMark
		public Assignment getMarksAssignment_9_1() { return cMarksAssignment_9_1; }
		
		//XMark
		public RuleCall getMarksXMarkParserRuleCall_9_1_0() { return cMarksXMarkParserRuleCall_9_1_0; }
		
		//marks+=XMark*
		public Assignment getMarksAssignment_9_2() { return cMarksAssignment_9_2; }
		
		//XMark
		public RuleCall getMarksXMarkParserRuleCall_9_2_0() { return cMarksXMarkParserRuleCall_9_2_0; }
		
		//'end'
		public Keyword getEndKeyword_10() { return cEndKeyword_10; }
	}
	public class XPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XPart Part:
		//	XSection | XQuestion;
		@Override public ParserRule getRule() { return rule; }
		
		//XSection | XQuestion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//XSection
		public RuleCall getXSectionParserRuleCall_0() { return cXSectionParserRuleCall_0; }
		
		//XQuestion
		public RuleCall getXQuestionParserRuleCall_1() { return cXQuestionParserRuleCall_1; }
	}
	public class XPartGradeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XPartGrade");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSectionGradeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQuestionGradeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XPartGrade PartGrade:
		//	SectionGrade | QuestionGrade;
		@Override public ParserRule getRule() { return rule; }
		
		//SectionGrade | QuestionGrade
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SectionGrade
		public RuleCall getSectionGradeParserRuleCall_0() { return cSectionGradeParserRuleCall_0; }
		
		//QuestionGrade
		public RuleCall getQuestionGradeParserRuleCall_1() { return cQuestionGradeParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class XCommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XComment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCommentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCommentSTRINGTerminalRuleCall_2_0 = (RuleCall)cCommentAssignment_2.eContents().get(0);
		
		//XComment Comment:
		//	name=ID ':' comment=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' comment=STRING
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//comment=STRING
		public Assignment getCommentAssignment_2() { return cCommentAssignment_2; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_2_0() { return cCommentSTRINGTerminalRuleCall_2_0; }
	}
	public class XSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSectionKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPartKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cSubsectionKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cCommentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCommentsXCommentParserRuleCall_3_0_0 = (RuleCall)cCommentsAssignment_3_0.eContents().get(0);
		private final Assignment cCommentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCommentsXCommentParserRuleCall_3_1_0 = (RuleCall)cCommentsAssignment_3_1.eContents().get(0);
		private final Assignment cSubsectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubsectionsXPartParserRuleCall_4_0 = (RuleCall)cSubsectionsAssignment_4.eContents().get(0);
		private final Assignment cSubsectionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSubsectionsXPartParserRuleCall_5_0 = (RuleCall)cSubsectionsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XSection Section:
		//	('section' | 'part' | 'subsection') name=EString
		//	'{' (comments+=XComment comments+=XComment*)?
		//	subsections+=XPart subsections+=XPart*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('section' | 'part' | 'subsection') name=EString '{' (comments+=XComment comments+=XComment*)? subsections+=XPart
		//subsections+=XPart* '}'
		public Group getGroup() { return cGroup; }
		
		//'section' | 'part' | 'subsection'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'section'
		public Keyword getSectionKeyword_0_0() { return cSectionKeyword_0_0; }
		
		//'part'
		public Keyword getPartKeyword_0_1() { return cPartKeyword_0_1; }
		
		//'subsection'
		public Keyword getSubsectionKeyword_0_2() { return cSubsectionKeyword_0_2; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(comments+=XComment comments+=XComment*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//comments+=XComment
		public Assignment getCommentsAssignment_3_0() { return cCommentsAssignment_3_0; }
		
		//XComment
		public RuleCall getCommentsXCommentParserRuleCall_3_0_0() { return cCommentsXCommentParserRuleCall_3_0_0; }
		
		//comments+=XComment*
		public Assignment getCommentsAssignment_3_1() { return cCommentsAssignment_3_1; }
		
		//XComment
		public RuleCall getCommentsXCommentParserRuleCall_3_1_0() { return cCommentsXCommentParserRuleCall_3_1_0; }
		
		//subsections+=XPart
		public Assignment getSubsectionsAssignment_4() { return cSubsectionsAssignment_4; }
		
		//XPart
		public RuleCall getSubsectionsXPartParserRuleCall_4_0() { return cSubsectionsXPartParserRuleCall_4_0; }
		
		//subsections+=XPart*
		public Assignment getSubsectionsAssignment_5() { return cSubsectionsAssignment_5; }
		
		//XPart
		public RuleCall getSubsectionsXPartParserRuleCall_5_0() { return cSubsectionsXPartParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class XQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuestionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cQuestionKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTaskKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cGradeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGradeINTTerminalRuleCall_3_0 = (RuleCall)cGradeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cCommentsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cCommentsXCommentParserRuleCall_4_0_0 = (RuleCall)cCommentsAssignment_4_0.eContents().get(0);
		private final Assignment cCommentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCommentsXCommentParserRuleCall_4_1_0 = (RuleCall)cCommentsAssignment_4_1.eContents().get(0);
		
		//XQuestion Question:
		//	{Question} ('question' | 'task') name=EString grade=INT (comments+=XComment comments+=XComment*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Question} ('question' | 'task') name=EString grade=INT (comments+=XComment comments+=XComment*)?
		public Group getGroup() { return cGroup; }
		
		//{Question}
		public Action getQuestionAction_0() { return cQuestionAction_0; }
		
		//'question' | 'task'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'question'
		public Keyword getQuestionKeyword_1_0() { return cQuestionKeyword_1_0; }
		
		//'task'
		public Keyword getTaskKeyword_1_1() { return cTaskKeyword_1_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//grade=INT
		public Assignment getGradeAssignment_3() { return cGradeAssignment_3; }
		
		//INT
		public RuleCall getGradeINTTerminalRuleCall_3_0() { return cGradeINTTerminalRuleCall_3_0; }
		
		//(comments+=XComment comments+=XComment*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//comments+=XComment
		public Assignment getCommentsAssignment_4_0() { return cCommentsAssignment_4_0; }
		
		//XComment
		public RuleCall getCommentsXCommentParserRuleCall_4_0_0() { return cCommentsXCommentParserRuleCall_4_0_0; }
		
		//comments+=XComment*
		public Assignment getCommentsAssignment_4_1() { return cCommentsAssignment_4_1; }
		
		//XComment
		public RuleCall getCommentsXCommentParserRuleCall_4_1_0() { return cCommentsXCommentParserRuleCall_4_1_0; }
	}
	public class XStudentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XStudent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFirstnameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFirstnameEStringParserRuleCall_2_0 = (RuleCall)cFirstnameAssignment_2.eContents().get(0);
		private final Assignment cLastnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLastnameEStringParserRuleCall_3_0 = (RuleCall)cLastnameAssignment_3.eContents().get(0);
		
		//XStudent Student:
		//	name=ID ':' firstname=EString lastname=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' firstname=EString lastname=EString
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//firstname=EString
		public Assignment getFirstnameAssignment_2() { return cFirstnameAssignment_2; }
		
		//EString
		public RuleCall getFirstnameEStringParserRuleCall_2_0() { return cFirstnameEStringParserRuleCall_2_0; }
		
		//lastname=EString
		public Assignment getLastnameAssignment_3() { return cLastnameAssignment_3; }
		
		//EString
		public RuleCall getLastnameEStringParserRuleCall_3_0() { return cLastnameEStringParserRuleCall_3_0; }
	}
	public class XGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStudentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cStudentsStudentCrossReference_2_0 = (CrossReference)cStudentsAssignment_2.eContents().get(0);
		private final RuleCall cStudentsStudentIDTerminalRuleCall_2_0_1 = (RuleCall)cStudentsStudentCrossReference_2_0.eContents().get(1);
		private final Assignment cStudentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStudentsStudentCrossReference_3_0 = (CrossReference)cStudentsAssignment_3.eContents().get(0);
		private final RuleCall cStudentsStudentIDTerminalRuleCall_3_0_1 = (RuleCall)cStudentsStudentCrossReference_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XGroup Group:
		//	name=ID
		//	'{'
		//	students+=[Student] students+=[Student]*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' students+=[Student] students+=[Student]* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//students+=[Student]
		public Assignment getStudentsAssignment_2() { return cStudentsAssignment_2; }
		
		//[Student]
		public CrossReference getStudentsStudentCrossReference_2_0() { return cStudentsStudentCrossReference_2_0; }
		
		//ID
		public RuleCall getStudentsStudentIDTerminalRuleCall_2_0_1() { return cStudentsStudentIDTerminalRuleCall_2_0_1; }
		
		//students+=[Student]*
		public Assignment getStudentsAssignment_3() { return cStudentsAssignment_3; }
		
		//[Student]
		public CrossReference getStudentsStudentCrossReference_3_0() { return cStudentsStudentCrossReference_3_0; }
		
		//ID
		public RuleCall getStudentsStudentIDTerminalRuleCall_3_0_1() { return cStudentsStudentIDTerminalRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class XMarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.XMark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMarkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRecipientAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRecipientRecipientCrossReference_1_0 = (CrossReference)cRecipientAssignment_1.eContents().get(0);
		private final RuleCall cRecipientRecipientIDTerminalRuleCall_1_0_1 = (RuleCall)cRecipientRecipientCrossReference_1_0.eContents().get(1);
		private final Keyword cBeginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGradeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGradeXPartGradeParserRuleCall_3_0 = (RuleCall)cGradeAssignment_3.eContents().get(0);
		private final Assignment cGradeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGradeXPartGradeParserRuleCall_4_0 = (RuleCall)cGradeAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XMark Mark:
		//	{Mark} recipient=[Recipient]
		//	'begin' grade+=XPartGrade grade+=XPartGrade* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mark} recipient=[Recipient] 'begin' grade+=XPartGrade grade+=XPartGrade* 'end'
		public Group getGroup() { return cGroup; }
		
		//{Mark}
		public Action getMarkAction_0() { return cMarkAction_0; }
		
		//recipient=[Recipient]
		public Assignment getRecipientAssignment_1() { return cRecipientAssignment_1; }
		
		//[Recipient]
		public CrossReference getRecipientRecipientCrossReference_1_0() { return cRecipientRecipientCrossReference_1_0; }
		
		//ID
		public RuleCall getRecipientRecipientIDTerminalRuleCall_1_0_1() { return cRecipientRecipientIDTerminalRuleCall_1_0_1; }
		
		//'begin'
		public Keyword getBeginKeyword_2() { return cBeginKeyword_2; }
		
		//grade+=XPartGrade
		public Assignment getGradeAssignment_3() { return cGradeAssignment_3; }
		
		//XPartGrade
		public RuleCall getGradeXPartGradeParserRuleCall_3_0() { return cGradeXPartGradeParserRuleCall_3_0; }
		
		//grade+=XPartGrade*
		public Assignment getGradeAssignment_4() { return cGradeAssignment_4; }
		
		//XPartGrade
		public RuleCall getGradeXPartGradeParserRuleCall_4_0() { return cGradeXPartGradeParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class SectionGradeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.SectionGrade");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPartSectionCrossReference_0_0 = (CrossReference)cPartAssignment_0.eContents().get(0);
		private final RuleCall cPartSectionEStringParserRuleCall_0_0_1 = (RuleCall)cPartSectionCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cCommentsCommentCrossReference_1_1_0 = (CrossReference)cCommentsAssignment_1_1.eContents().get(0);
		private final RuleCall cCommentsCommentEStringParserRuleCall_1_1_0_1 = (RuleCall)cCommentsCommentCrossReference_1_1_0.eContents().get(1);
		private final Assignment cCommentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cCommentsCommentCrossReference_1_2_0 = (CrossReference)cCommentsAssignment_1_2.eContents().get(0);
		private final RuleCall cCommentsCommentEStringParserRuleCall_1_2_0_1 = (RuleCall)cCommentsCommentCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubgradesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubgradesXPartGradeParserRuleCall_3_0 = (RuleCall)cSubgradesAssignment_3.eContents().get(0);
		private final Assignment cSubgradesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSubgradesXPartGradeParserRuleCall_4_0 = (RuleCall)cSubgradesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SectionGrade:
		//	part=[Section|EString] ('(' comments+=[Comment|EString] comments+=[Comment|EString]* ')')?
		//	'{'
		//	subgrades+=XPartGrade subgrades+=XPartGrade*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//part=[Section|EString] ('(' comments+=[Comment|EString] comments+=[Comment|EString]* ')')? '{' subgrades+=XPartGrade
		//subgrades+=XPartGrade* '}'
		public Group getGroup() { return cGroup; }
		
		//part=[Section|EString]
		public Assignment getPartAssignment_0() { return cPartAssignment_0; }
		
		//[Section|EString]
		public CrossReference getPartSectionCrossReference_0_0() { return cPartSectionCrossReference_0_0; }
		
		//EString
		public RuleCall getPartSectionEStringParserRuleCall_0_0_1() { return cPartSectionEStringParserRuleCall_0_0_1; }
		
		//('(' comments+=[Comment|EString] comments+=[Comment|EString]* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//comments+=[Comment|EString]
		public Assignment getCommentsAssignment_1_1() { return cCommentsAssignment_1_1; }
		
		//[Comment|EString]
		public CrossReference getCommentsCommentCrossReference_1_1_0() { return cCommentsCommentCrossReference_1_1_0; }
		
		//EString
		public RuleCall getCommentsCommentEStringParserRuleCall_1_1_0_1() { return cCommentsCommentEStringParserRuleCall_1_1_0_1; }
		
		//comments+=[Comment|EString]*
		public Assignment getCommentsAssignment_1_2() { return cCommentsAssignment_1_2; }
		
		//[Comment|EString]
		public CrossReference getCommentsCommentCrossReference_1_2_0() { return cCommentsCommentCrossReference_1_2_0; }
		
		//EString
		public RuleCall getCommentsCommentEStringParserRuleCall_1_2_0_1() { return cCommentsCommentEStringParserRuleCall_1_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//subgrades+=XPartGrade
		public Assignment getSubgradesAssignment_3() { return cSubgradesAssignment_3; }
		
		//XPartGrade
		public RuleCall getSubgradesXPartGradeParserRuleCall_3_0() { return cSubgradesXPartGradeParserRuleCall_3_0; }
		
		//subgrades+=XPartGrade*
		public Assignment getSubgradesAssignment_4() { return cSubgradesAssignment_4; }
		
		//XPartGrade
		public RuleCall getSubgradesXPartGradeParserRuleCall_4_0() { return cSubgradesXPartGradeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class QuestionGradeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.QuestionGrade");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPartQuestionCrossReference_0_0 = (CrossReference)cPartAssignment_0.eContents().get(0);
		private final RuleCall cPartQuestionEStringParserRuleCall_0_0_1 = (RuleCall)cPartQuestionCrossReference_0_0.eContents().get(1);
		private final Assignment cMarkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMarkEIntParserRuleCall_1_0 = (RuleCall)cMarkAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCommentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCommentsCommentCrossReference_2_1_0 = (CrossReference)cCommentsAssignment_2_1.eContents().get(0);
		private final RuleCall cCommentsCommentEStringParserRuleCall_2_1_0_1 = (RuleCall)cCommentsCommentCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cCommentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cCommentsCommentCrossReference_2_2_1_0 = (CrossReference)cCommentsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cCommentsCommentEStringParserRuleCall_2_2_1_0_1 = (RuleCall)cCommentsCommentCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//QuestionGrade:
		//	part=[Question|EString] mark=EInt ('(' comments+=[Comment|EString] ("," comments+=[Comment|EString])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//part=[Question|EString] mark=EInt ('(' comments+=[Comment|EString] ("," comments+=[Comment|EString])* ')')?
		public Group getGroup() { return cGroup; }
		
		//part=[Question|EString]
		public Assignment getPartAssignment_0() { return cPartAssignment_0; }
		
		//[Question|EString]
		public CrossReference getPartQuestionCrossReference_0_0() { return cPartQuestionCrossReference_0_0; }
		
		//EString
		public RuleCall getPartQuestionEStringParserRuleCall_0_0_1() { return cPartQuestionEStringParserRuleCall_0_0_1; }
		
		//mark=EInt
		public Assignment getMarkAssignment_1() { return cMarkAssignment_1; }
		
		//EInt
		public RuleCall getMarkEIntParserRuleCall_1_0() { return cMarkEIntParserRuleCall_1_0; }
		
		//('(' comments+=[Comment|EString] ("," comments+=[Comment|EString])* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//comments+=[Comment|EString]
		public Assignment getCommentsAssignment_2_1() { return cCommentsAssignment_2_1; }
		
		//[Comment|EString]
		public CrossReference getCommentsCommentCrossReference_2_1_0() { return cCommentsCommentCrossReference_2_1_0; }
		
		//EString
		public RuleCall getCommentsCommentEStringParserRuleCall_2_1_0_1() { return cCommentsCommentEStringParserRuleCall_2_1_0_1; }
		
		//("," comments+=[Comment|EString])*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//comments+=[Comment|EString]
		public Assignment getCommentsAssignment_2_2_1() { return cCommentsAssignment_2_2_1; }
		
		//[Comment|EString]
		public CrossReference getCommentsCommentCrossReference_2_2_1_0() { return cCommentsCommentCrossReference_2_2_1_0; }
		
		//EString
		public RuleCall getCommentsCommentEStringParserRuleCall_2_2_1_0_1() { return cCommentsCommentEStringParserRuleCall_2_2_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ac.soton.xmark.marking.XMarking.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final ExerciseElements pExercise;
	private final XPartElements pXPart;
	private final XPartGradeElements pXPartGrade;
	private final EStringElements pEString;
	private final XCommentElements pXComment;
	private final XSectionElements pXSection;
	private final XQuestionElements pXQuestion;
	private final XStudentElements pXStudent;
	private final XGroupElements pXGroup;
	private final XMarkElements pXMark;
	private final SectionGradeElements pSectionGrade;
	private final QuestionGradeElements pQuestionGrade;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public XMarkingGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExercise = new ExerciseElements();
		this.pXPart = new XPartElements();
		this.pXPartGrade = new XPartGradeElements();
		this.pEString = new EStringElements();
		this.pXComment = new XCommentElements();
		this.pXSection = new XSectionElements();
		this.pXQuestion = new XQuestionElements();
		this.pXStudent = new XStudentElements();
		this.pXGroup = new XGroupElements();
		this.pXMark = new XMarkElements();
		this.pSectionGrade = new SectionGradeElements();
		this.pQuestionGrade = new QuestionGradeElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ac.soton.xmark.marking.XMarking".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Exercise:
	//	{Exercise} ('exercise' | 'problem' 'class' | 'tutorial' | 'assignment' | 'coursework') name=EString '(' module=EString
	//	')' (parts+=XPart parts+=XPart*)? ('students' students+=XStudent students+=XStudent*) ('groups' groups+=XGroup
	//	groups+=XGroup*)? ('marks' marks+=XMark marks+=XMark*)?
	//	'end';
	public ExerciseElements getExerciseAccess() {
		return pExercise;
	}
	
	public ParserRule getExerciseRule() {
		return getExerciseAccess().getRule();
	}
	
	//XPart Part:
	//	XSection | XQuestion;
	public XPartElements getXPartAccess() {
		return pXPart;
	}
	
	public ParserRule getXPartRule() {
		return getXPartAccess().getRule();
	}
	
	//XPartGrade PartGrade:
	//	SectionGrade | QuestionGrade;
	public XPartGradeElements getXPartGradeAccess() {
		return pXPartGrade;
	}
	
	public ParserRule getXPartGradeRule() {
		return getXPartGradeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//XComment Comment:
	//	name=ID ':' comment=STRING;
	public XCommentElements getXCommentAccess() {
		return pXComment;
	}
	
	public ParserRule getXCommentRule() {
		return getXCommentAccess().getRule();
	}
	
	//XSection Section:
	//	('section' | 'part' | 'subsection') name=EString
	//	'{' (comments+=XComment comments+=XComment*)?
	//	subsections+=XPart subsections+=XPart*
	//	'}';
	public XSectionElements getXSectionAccess() {
		return pXSection;
	}
	
	public ParserRule getXSectionRule() {
		return getXSectionAccess().getRule();
	}
	
	//XQuestion Question:
	//	{Question} ('question' | 'task') name=EString grade=INT (comments+=XComment comments+=XComment*)?;
	public XQuestionElements getXQuestionAccess() {
		return pXQuestion;
	}
	
	public ParserRule getXQuestionRule() {
		return getXQuestionAccess().getRule();
	}
	
	//XStudent Student:
	//	name=ID ':' firstname=EString lastname=EString;
	public XStudentElements getXStudentAccess() {
		return pXStudent;
	}
	
	public ParserRule getXStudentRule() {
		return getXStudentAccess().getRule();
	}
	
	//XGroup Group:
	//	name=ID
	//	'{'
	//	students+=[Student] students+=[Student]*
	//	'}';
	public XGroupElements getXGroupAccess() {
		return pXGroup;
	}
	
	public ParserRule getXGroupRule() {
		return getXGroupAccess().getRule();
	}
	
	//XMark Mark:
	//	{Mark} recipient=[Recipient]
	//	'begin' grade+=XPartGrade grade+=XPartGrade* 'end';
	public XMarkElements getXMarkAccess() {
		return pXMark;
	}
	
	public ParserRule getXMarkRule() {
		return getXMarkAccess().getRule();
	}
	
	//SectionGrade:
	//	part=[Section|EString] ('(' comments+=[Comment|EString] comments+=[Comment|EString]* ')')?
	//	'{'
	//	subgrades+=XPartGrade subgrades+=XPartGrade*
	//	'}';
	public SectionGradeElements getSectionGradeAccess() {
		return pSectionGrade;
	}
	
	public ParserRule getSectionGradeRule() {
		return getSectionGradeAccess().getRule();
	}
	
	//QuestionGrade:
	//	part=[Question|EString] mark=EInt ('(' comments+=[Comment|EString] ("," comments+=[Comment|EString])* ')')?;
	public QuestionGradeElements getQuestionGradeAccess() {
		return pQuestionGrade;
	}
	
	public ParserRule getQuestionGradeRule() {
		return getQuestionGradeAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
