/**
 * generated by Xtext 2.14.0
 */
package ac.soton.xmark.marking.generator;

import ac.soton.xmark.marking.Comment;
import ac.soton.xmark.marking.Exercise;
import ac.soton.xmark.marking.Group;
import ac.soton.xmark.marking.Mark;
import ac.soton.xmark.marking.Part;
import ac.soton.xmark.marking.PartGrade;
import ac.soton.xmark.marking.QuestionGrade;
import ac.soton.xmark.marking.Recipient;
import ac.soton.xmark.marking.SectionGrade;
import ac.soton.xmark.marking.Student;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class XMarkingGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    Exercise exercise = ((Exercise) _get);
    String _name = exercise.getName();
    String _plus = (_name + ".fbk");
    fsa.generateFile(_plus, this.feedback(exercise));
    String _name_1 = exercise.getName();
    String _plus_1 = (_name_1 + ".csv");
    fsa.generateFile(_plus_1, this.grade(exercise));
  }
  
  private CharSequence feedback(final Exercise exercise) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Feedback ");
    String _name = exercise.getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    {
      EList<Mark> _marks = exercise.getMarks();
      for(final Mark mark : _marks) {
        _builder.newLine();
        String _name_1 = mark.getRecipient().getName();
        _builder.append(_name_1);
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("recipients ");
        CharSequence _recipients = this.recipients(mark, exercise);
        _builder.append(_recipients, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("title ");
        CharSequence _title = this.title(exercise);
        _builder.append(_title, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("feedback ");
        CharSequence _feedback = this.feedback(mark, exercise);
        _builder.append(_feedback, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("end");
    return _builder;
  }
  
  private CharSequence recipients(final Mark mark, final Exercise exercise) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    final Recipient recipient = mark.getRecipient();
    {
      if ((recipient instanceof Group)) {
        final Group group = ((Group) recipient);
        {
          EList<Student> _students = group.getStudents();
          for(final Student student : _students) {
            String _firstname = student.getFirstname();
            _builder.append(_firstname);
            _builder.append(" ");
            String _lastname = student.getLastname();
            _builder.append(_lastname);
            _builder.append(" <");
            String _name = student.getName();
            _builder.append(_name);
            _builder.append("@ecs.soton.ac.uk>, ");
          }
        }
      } else {
        final Student student_1 = ((Student) recipient);
        String _firstname_1 = student_1.getFirstname();
        _builder.append(_firstname_1);
        _builder.append(" ");
        String _lastname_1 = student_1.getLastname();
        _builder.append(_lastname_1);
        _builder.append(" <");
        String _name_1 = student_1.getName();
        _builder.append(_name_1);
        _builder.append("@ecs.soton.ac.uk>");
      }
    }
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence title(final Exercise exercise) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _module = exercise.getModule();
    _builder.append(_module);
    _builder.append(" ");
    String _name = exercise.getName();
    _builder.append(_name);
    _builder.append(" Feedback\"");
    return _builder;
  }
  
  private CharSequence feedback(final Mark mark, final Exercise exercise) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Dear ");
    CharSequence _recipients = this.recipients(mark);
    _builder.append(_recipients, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("Please find the the feedback for your ");
    String _name = exercise.getName();
    _builder.append(_name, " ");
    _builder.append(" below");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("--");
    _builder.newLine();
    {
      EList<PartGrade> _grade = mark.getGrade();
      for(final PartGrade grade : _grade) {
        String _feedback = this.feedback(grade);
        _builder.append(_feedback);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(" ");
    _builder.append("Total ");
    int _calculateGrade = this.calculateGrade(mark);
    _builder.append(_calculateGrade, " ");
    _builder.append("/100");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("--");
    _builder.newLine();
    _builder.append("Best regards,");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\"");
    _builder.newLine();
    return _builder;
  }
  
  private int calculateGrade(final Mark mark) {
    int calGrade = 0;
    EList<PartGrade> _grade = mark.getGrade();
    for (final PartGrade grade : _grade) {
      int _calGrade = calGrade;
      int _calculateGrade = this.calculateGrade(grade);
      calGrade = (_calGrade + _calculateGrade);
    }
    return calGrade;
  }
  
  private int calculateGrade(final PartGrade grade) {
    if ((grade instanceof QuestionGrade)) {
      return ((QuestionGrade)grade).getMark();
    }
    final SectionGrade sectGrade = ((SectionGrade) grade);
    int calGrade = 0;
    EList<PartGrade> _subgrades = sectGrade.getSubgrades();
    for (final PartGrade partGrade : _subgrades) {
      int _calGrade = calGrade;
      int _calculateGrade = this.calculateGrade(partGrade);
      calGrade = (_calGrade + _calculateGrade);
    }
    return calGrade;
  }
  
  private CharSequence recipients(final Mark mark) {
    StringConcatenation _builder = new StringConcatenation();
    final Recipient recipient = mark.getRecipient();
    {
      if ((recipient instanceof Group)) {
        final Group group = ((Group) recipient);
        {
          EList<Student> _students = group.getStudents();
          for(final Student student : _students) {
            String _firstname = student.getFirstname();
            _builder.append(_firstname);
            _builder.append(", ");
          }
        }
      } else {
        final Student student_1 = ((Student) recipient);
        String _firstname_1 = student_1.getFirstname();
        _builder.append(_firstname_1);
        _builder.append(",");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private String feedback(final PartGrade grade) {
    StringConcatenation _builder = new StringConcatenation();
    final Part part = grade.getPart();
    {
      if ((grade instanceof QuestionGrade)) {
        final QuestionGrade questionGrade = ((QuestionGrade) grade);
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        String _name = part.getName();
        _builder.append(_name, "\t");
        _builder.append(" (");
        int _mark = questionGrade.getMark();
        _builder.append(_mark, "\t");
        _builder.append("/");
        int _grade = part.getGrade();
        _builder.append(_grade, "\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
        {
          EList<Comment> _comments = ((QuestionGrade)grade).getComments();
          for(final Comment comment : _comments) {
            _builder.append("\t\t");
            _builder.append("* ");
            String _comment = comment.getComment();
            _builder.append(_comment, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        _builder.append("\t");
        final SectionGrade sectionGrade = ((SectionGrade) grade);
        _builder.newLineIfNotEmpty();
        String _name_1 = part.getName();
        _builder.append(_name_1);
        _builder.newLineIfNotEmpty();
        {
          EList<Comment> _comments_1 = grade.getComments();
          for(final Comment comment_1 : _comments_1) {
            _builder.append("\t");
            _builder.append("* ");
            String _comment_1 = comment_1.getComment();
            _builder.append(_comment_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<PartGrade> _subgrades = sectionGrade.getSubgrades();
          for(final PartGrade subGrade : _subgrades) {
            String _feedback = this.feedback(subGrade);
            _builder.append(_feedback);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  private CharSequence grade(final Exercise exercise) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Student> _students = exercise.getStudents();
      for(final Student student : _students) {
        _builder.newLineIfNotEmpty();
        CharSequence _grade = this.grade(student, exercise);
        _builder.append(_grade);
      }
    }
    return _builder;
  }
  
  /**
   * The algorithm is certainly not optimal at the moment
   */
  private CharSequence grade(final Student student, final Exercise exercise) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = student.getName();
    _builder.append(_name);
    _builder.append(",");
    {
      EList<Mark> _marks = exercise.getMarks();
      for(final Mark mark : _marks) {
        {
          Recipient _recipient = mark.getRecipient();
          if ((_recipient instanceof Student)) {
            {
              Recipient _recipient_1 = mark.getRecipient();
              boolean _tripleEquals = (student == _recipient_1);
              if (_tripleEquals) {
                CharSequence _printGrades = this.printGrades(mark);
                _builder.append(_printGrades);
              }
            }
          } else {
            Recipient _recipient_2 = mark.getRecipient();
            final Group group = ((Group) _recipient_2);
            {
              boolean _contains = group.getStudents().contains(student);
              if (_contains) {
                CharSequence _printGrades_1 = this.printGrades(mark);
                _builder.append(_printGrades_1);
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  private CharSequence printGrades(final Mark mark) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PartGrade> _grade = mark.getGrade();
      for(final PartGrade grade : _grade) {
        String _printGrade = this.printGrade(grade);
        _builder.append(_printGrade);
      }
    }
    return _builder;
  }
  
  private String printGrade(final PartGrade grade) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((grade instanceof QuestionGrade)) {
        int _mark = ((QuestionGrade)grade).getMark();
        _builder.append(_mark);
        _builder.append(",");
      } else {
        final SectionGrade sectGrade = ((SectionGrade) grade);
        {
          EList<PartGrade> _subgrades = sectGrade.getSubgrades();
          for(final PartGrade subGrade : _subgrades) {
            String _printGrade = this.printGrade(subGrade);
            _builder.append(_printGrade);
          }
        }
      }
    }
    return _builder.toString();
  }
}
